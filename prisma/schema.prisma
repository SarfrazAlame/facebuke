generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?
  email         String?    @unique
  image         String?
  emailVerified DateTime?
  createAt      DateTime   @default(now())
  updateAt      DateTime   @updatedAt
  Account       Account[]
  comments      Comment[]
  connectedBy   Follows[]  @relation("addfriend")
  confirm       Follows[]  @relation("confirm")
  likes         Like[]
  posts         Post[]
  saved         SavePost[]
  Session       Session[]
}

model Follows {
  confirmId   String
  addfriendId String
  addfriend   User   @relation("addfriend", fields: [addfriendId], references: [id])
  confirm     User   @relation("confirm", fields: [confirmId], references: [id])

  @@id([confirmId, addfriendId])
  @@index([confirmId])
  @@index([addfriendId])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  caption   String?
  imageUrl  String     @unique
  comments  Comment[]
  SavePost  SavePost[]
  likes     Like[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model SavePost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
}

model Comment {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  comment  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@index([postId])
  @@index([userId])
}
